AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample:
  Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based
  on the region in which the stack is run. This example creates an EC2 security group
  for the instance to give you SSH access. **WARNING** This template creates an Amazon
  EC2 instance. You will be billed for the AWS resources used if you create a stack
  from this template.'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance. This key would be used by you to ssh into ec2-user.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  JenkinsKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance from jenkins. This is the key Jenkins controller will use to install agents on nodes.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3a.micro
    AllowedValues: [t2.micro, t3a.small, t3a.micro, t3a.medium]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances. For troubleshooting. Allow all for default
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
Resources:
  JenkinsIamRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Description: Role to get public key so jenkins user can ssh
      Policies:
        - PolicyName: EC2KeyPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ec2:DescribeKeyPairs
                Resource: '*'
        - PolicyName: SSMPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'ssm:PutParameter'
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/jenkins_worker_node_ami'
        - PolicyName: ImagePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - ec2:CreateTags
              - ec2:CreateImage
              Resource:
              - arn:aws:ec2:us-east-1:015784623623:instance/*
              - arn:aws:ec2:*::snapshot/*
              - arn:aws:ec2:*::image/*
              Condition:
                StringEquals:
                  aws:ResourceTag/Name: JenkinsWorkerAMI
            - Effect: Allow
              Action: ec2:CreateImage
              Resource:
              - arn:aws:ec2:*::snapshot/*
              - arn:aws:ec2:*:015784623623:instance/instanceid
              - arn:aws:ec2:*::image/*
  JenkinsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: [!Ref JenkinsIamRole]
  JenkinsInstance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
           - Key: Name
             Value: JenkinsWorkerAMI
      IamInstanceProfile: !Ref JenkinsInstanceProfile
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [!Ref 'JenkinsSecurityGroup']
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      BlockDeviceMappings:
           - 
            DeviceName: "/dev/xvda"
            Ebs:
              VolumeSize: 32
              Encrypted: true

      UserData: 
        Fn::Base64:
          !Sub |
          #!/bin/bash

          #java and git
          sudo yum update â€“y
          sudo yum upgrade
          sudo yum install java-21-amazon-corretto-headless -y
          sudo yum install git -y

          #docker
          sudo yum install docker -y
          sudo systemctl enable docker
          sudo systemctl start docker


          # # # No longer needed commands here - using jenkins tools for node and snyk
          # #install node
          # curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          # nvm install 18
          # nvm use 18
          # #snyk - https://docs.snyk.io/snyk-cli/install-or-update-the-snyk-cli
          # npm install snyk

          # chrome for testing
          cd /tmp
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
          sudo yum install ./google-chrome-stable_current_x86_64.rpm -y
          sudo ln -s /usr/bin/google-chrome-stable /usr/bin/chromium
          export CHROME_BIN='/usr/bin/chromium'



          #https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-users.html
          sudo adduser jenkins-controller
          sudo usermod -a -G docker jenkins-controller

          sudo -u jenkins-controller bash -c 'mkdir /home/jenkins-controller/.ssh;\
          chmod 700 /home/jenkins-controller/.ssh;\
          touch /home/jenkins-controller/.ssh/authorized_keys;\
          chmod 600 /home/jenkins-controller/.ssh/authorized_keys'

          #Cypress Dependencies
          ## https://docs.cypress.io/guides/getting-started/installing-cypress#Linux-Prerequisites
          sudo dnf install -y xorg-x11-server-Xvfb gtk3-devel nss alsa-lib
          #this is the command to edit authorized keys
          sudo -u jenkins-controller bash -c 'aws ec2 describe-key-pairs --key-names ${JenkinsKeyName} --include-public-key --query 'KeyPairs[0].[PublicKey][0]' --output text >> /home/jenkins-controller/.ssh/authorized_keys'

          #create image
          TOKEN=$(curl --request PUT "http://169.254.169.254/latest/api/token" --header "X-aws-ec2-metadata-token-ttl-seconds: 3600")
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id --header "X-aws-ec2-metadata-token: $TOKEN")
          printf -v date '%(%Y-%m-%d)T\n' -1
          imagename="jenkins-worker-$date"

          ami=$(aws ec2 create-image --instance-id $INSTANCE_ID --name $imagename --output text) && aws ssm put-parameter --name jenkins_worker_node_ami --value $ami --type String --overwrite --region ${AWS::Region}


  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'JenkinsInstance'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [JenkinsInstance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [JenkinsInstance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [JenkinsInstance, PublicIp]

